import torch
import torch.nn as nn
from torch.nn import functional as F


# Hyperparameters with adjustments to address overfitting
batch_size = 64  # Increased batch size for more stable training
block_size = 8
max_iters = 10000  # Increased iterations to allow more training time
eval_interval = 300
learning_rate = 5e-4  # Reduced learning rate for smoother optimization
eval_iters = 200
n_embd = 32  # Reduced model capacity to prevent overfitting
n_head = 2   # Reduced number of attention heads
dropout = 0.4  # Increased dropout rate for better regularization
generation_final_length = 300


# Set device
device = 'mps' if torch.backends.mps.is_available() else 'cpu'
print(f"Using device: {device}")


torch.manual_seed(1337)


# Load cleaned data
file_path = "/Users/Saad1/Desktop/cleaned_LORD.txt"
with open(file_path, 'r', encoding='utf-8') as f:
   cleaned_text = f.read()


# Word-level tokenization
words = sorted(set(cleaned_text.split()))
vocab_size = len(words)
stoi = {word: i for i, word in enumerate(words)}
itos = {i: word for i, word in enumerate(words)}
encode = lambda s: [stoi[word] for word in s.split()]
decode = lambda l: ' '.join([itos[i] for i in l])


# Encode dataset
data = torch.tensor(encode(cleaned_text), dtype=torch.long)
n = int(0.8 * len(data))  # Adjusted data split from 90% training to 80% training
train_data = data[:n]
val_data = data[n:]


def get_batch(split):
   data = train_data if split == 'train' else val_data
   ix = torch.randint(len(data) - block_size, (batch_size,))
   x = torch.stack([data[i:i+block_size] for i in ix])
   y = torch.stack([data[i+1:i+block_size+1] for i in ix])
   x, y = x.to(device), y.to(device)
   return x, y


@torch.no_grad()
def estimate_loss():
   out = {}
   model.eval()
   for split in ['train', 'val']:
       losses = torch.zeros(eval_iters)
       for k in range(eval_iters):
           X, Y = get_batch(split)
           logits, loss = model(X, Y)
           losses[k] = loss.item()
       out[split] = losses.mean()
   model.train()
   return out


class Head(nn.Module):
   """ Single head of self-attention """
   def __init__(self, head_size):
       super().__init__()
       self.key = nn.Linear(n_embd, head_size, bias=False)
       self.query = nn.Linear(n_embd, head_size, bias=False)
       self.value = nn.Linear(n_embd, head_size, bias=False)
       self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))
       self.dropout = nn.Dropout(dropout)  # Add dropout


   def forward(self, x):
       B, T, C = x.shape
       k = self.key(x)
       q = self.query(x)
      
       # compute attention scores
       wei = q @ k.transpose(-2,-1) * k.shape[-1]**-0.5
       wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))
       wei = F.softmax(wei, dim=-1)
       wei = self.dropout(wei)  # Apply dropout to attention weights
      
       # weighted aggregation of values
       v = self.value(x)
       out = wei @ v
       return out


class MultiHeadAttention(nn.Module):
   """ Multiple heads of self-attention in parallel """
   def __init__(self, num_heads, head_size):
       super().__init__()
       self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])
       self.proj = nn.Linear(num_heads * head_size, n_embd)
       self.dropout = nn.Dropout(dropout)  # Add dropout


   def forward(self, x):
       out = torch.cat([h(x) for h in self.heads], dim=-1)
       out = self.dropout(self.proj(out))  # Apply dropout after projection
       return out


class FeedForward(nn.Module):
   """ Simple feed forward network with non-linearity """
   def __init__(self, n_embd):
       super().__init__()
       self.net = nn.Sequential(
           nn.Linear(n_embd, 4 * n_embd),
           nn.ReLU(),
           nn.Dropout(dropout),  # Add dropout after activation
           nn.Linear(4 * n_embd, n_embd),
           nn.Dropout(dropout)  # Add dropout after projection
       )


   def forward(self, x):
       return self.net(x)


class Block(nn.Module):
   """ Transformer block: communication followed by computation """
   def __init__(self, n_embd, n_head):
       super().__init__()
       head_size = n_embd // n_head
       self.sa = MultiHeadAttention(n_head, head_size)
       self.ffwd = FeedForward(n_embd)
       self.ln1 = nn.LayerNorm(n_embd)
       self.ln2 = nn.LayerNorm(n_embd)


   def forward(self, x):
       x = x + self.sa(self.ln1(x))
       x = x + self.ffwd(self.ln2(x))
       return x


class BigramLanguageModel(nn.Module):
   def __init__(self):
       super().__init__()
       # Token and position embeddings
       self.token_embedding_table = nn.Embedding(vocab_size, n_embd)
       self.position_embedding_table = nn.Embedding(block_size, n_embd)
      
       # Create a single transformer block
       assert n_embd % n_head == 0, "n_embd must be divisible by n_head"
       self.block = Block(n_embd, n_head)
      
       # Final layer norm and linear layer
       self.ln_f = nn.LayerNorm(n_embd)
       self.lm_head = nn.Linear(n_embd, vocab_size)
      
       # Apply dropout to embeddings
       self.drop = nn.Dropout(dropout)


   def forward(self, idx, targets=None):
       B, T = idx.shape
      
       # Token and position embeddings with dropout
       tok_emb = self.token_embedding_table(idx)
       pos_emb = self.position_embedding_table(torch.arange(T, device=device))
       x = self.drop(tok_emb + pos_emb)  # Apply dropout to combined embeddings
      
       # Apply transformer block
       x = self.block(x)
      
       # Apply final layer norm
       x = self.ln_f(x)
      
       # Language model head
       logits = self.lm_head(x)


       if targets is None:
           loss = None
       else:
           B, T, C = logits.shape
           logits = logits.view(B*T, C)
           targets = targets.view(B*T)
           loss = F.cross_entropy(logits, targets)


       return logits, loss


   def generate(self, idx, max_new_tokens):
       for _ in range(max_new_tokens):
           idx_cond = idx[:, -block_size:]
           logits, _ = self(idx_cond)
           logits = logits[:, -1, :]
           probs = F.softmax(logits, dim=-1)
           idx_next = torch.multinomial(probs, num_samples=1)
           idx = torch.cat((idx, idx_next), dim=1)
       return idx


# Create model instance
model = BigramLanguageModel()
model = model.to(device)
print(f"Number of parameters: {sum(p.numel() for p in model.parameters())/1000:.2f}k")


# Create optimizer
optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)


# Training loop
final_train_loss = 0.0
final_val_loss = 0.0


for iter in range(max_iters):
   if iter % eval_interval == 0:
       losses = estimate_loss()
       final_train_loss = losses['train']
       final_val_loss = losses['val']
       print(f"step {iter}: train loss {final_train_loss:.4f}, val loss {final_val_loss:.4f}")


   xb, yb = get_batch('train')
   logits, loss = model(xb, yb)
   optimizer.zero_grad(set_to_none=True)
   loss.backward()
   optimizer.step()


# Final results
print(f"\nFinal Average Training Loss: {final_train_loss:.4f}")
print(f"Final Average Validation Loss: {final_val_loss:.4f}")


# Generate text
context = torch.zeros((1, 1), dtype=torch.long, device=device)
generated_tokens = model.generate(context, max_new_tokens=generation_final_length)[0].tolist()
generated_text = decode(generated_tokens)
print("\n--- Final Generated Text ---")
print(generated_text)


# Save generated text
milestone_file = "/Users/Saad1/Desktop/improvement1.txt"
with open(milestone_file, 'w', encoding='utf-8') as f:
   f.write(generated_text)


print(f"\nGenerated text saved to {milestone_file}")
